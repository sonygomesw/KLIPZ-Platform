import { supabase } from '../config/supabase';

export interface ScrapingResult {
  success: boolean;
  successCount?: number;
  errorCount?: number;
  error?: string;
}

class AutoScrapingService {
  // D√©clencher le scraping automatique de toutes les soumissions en attente
  async triggerAutoScraping(): Promise<ScrapingResult> {
    try {
      console.log('üîÑ D√©clenchement du scraping automatique...');
      
      const { data, error } = await supabase.functions.invoke('auto-scraping', {
        body: { action: 'scrape-all' }
      });
      
      if (error) {
        console.error('‚ùå Erreur scraping automatique:', error);
        return { success: false, error: error.message };
      }
      
      console.log('‚úÖ Scraping automatique termin√©:', data);
      return { success: true, ...data };
      
    } catch (error) {
      console.error('‚ùå Erreur appel scraping automatique:', error);
      return { success: false, error: 'Erreur de connexion' };
    }
  }

  // Scraper une soumission sp√©cifique
  async scrapeSingleSubmission(submissionId: string): Promise<ScrapingResult> {
    try {
      console.log(`üîç Scraping soumission ${submissionId}...`);
      
      const { data, error } = await supabase.functions.invoke('auto-scraping', {
        body: { 
          action: 'scrape-single',
          submissionId: submissionId
        }
      });
      
      if (error) {
        console.error('‚ùå Erreur scraping soumission:', error);
        return { success: false, error: error.message };
      }
      
      console.log('‚úÖ Scraping soumission termin√©:', data);
      return { success: true, ...data };
      
    } catch (error) {
      console.error('‚ùå Erreur appel scraping soumission:', error);
      return { success: false, error: 'Erreur de connexion' };
    }
  }

  // V√©rifier le statut de l'API TikTok
  async checkAPIHealth(): Promise<boolean> {
    try {
      const { data, error } = await supabase.functions.invoke('auto-scraping', {
        body: { action: 'check-health' }
      });
      
      if (error) {
        console.error('‚ùå Erreur v√©rification API:', error);
        return false;
      }
      
      return data?.healthy || false;
      
    } catch (error) {
      console.error('‚ùå Erreur v√©rification sant√© API:', error);
      return false;
    }
  }

  // Obtenir les statistiques de scraping
  async getScrapingStats(): Promise<any> {
    try {
      const { data, error } = await supabase.functions.invoke('auto-scraping', {
        body: { action: 'get-stats' }
      });
      
      if (error) {
        console.error('‚ùå Erreur r√©cup√©ration stats:', error);
        return null;
      }
      
      return data;
      
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration statistiques:', error);
      return null;
    }
  }
}

export default new AutoScrapingService(); 