require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// Configuration (√† adapter selon votre environnement)
const supabaseUrl = process.env.SUPABASE_URL || 'https://ajbfgeojhfbtbmouynva.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testSubmissionFlow() {
  try {
    console.log('üß™ Test du flow de soumission complet...\n');

    // 1. V√©rifier la connexion
    console.log('1Ô∏è‚É£ Test de connexion...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .limit(1);
    
    if (usersError) {
      console.error('‚ùå Erreur de connexion:', usersError);
      return;
    }
    console.log('‚úÖ Connexion r√©ussie');

    // 2. V√©rifier les campagnes existantes
    console.log('\n2Ô∏è‚É£ V√©rification des campagnes...');
    const { data: campaigns, error: campaignsError } = await supabase
      .from('campaigns')
      .select('*')
      .eq('status', 'active')
      .limit(5);

    if (campaignsError) {
      console.error('‚ùå Erreur r√©cup√©ration campagnes:', campaignsError);
      return;
    }

    console.log(`‚úÖ ${campaigns?.length || 0} campagnes actives trouv√©es`);
    if (campaigns && campaigns.length > 0) {
      console.log('   Premi√®re campagne:', campaigns[0].title);
    }

    // 3. V√©rifier les utilisateurs clippers
    console.log('\n3Ô∏è‚É£ V√©rification des clippers...');
    const { data: clippers, error: clippersError } = await supabase
      .from('users')
      .select('*')
      .eq('role', 'clipper')
      .limit(5);

    if (clippersError) {
      console.error('‚ùå Erreur r√©cup√©ration clippers:', clippersError);
      return;
    }

    console.log(`‚úÖ ${clippers?.length || 0} clippers trouv√©s`);
    if (clippers && clippers.length > 0) {
      console.log('   Premier clipper:', clippers[0].email);
    }

    // 4. V√©rifier la table notifications
    console.log('\n4Ô∏è‚É£ V√©rification de la table notifications...');
    const { data: notifications, error: notificationsError } = await supabase
      .from('notifications')
      .select('*')
      .limit(5);

    if (notificationsError) {
      console.log('‚ö†Ô∏è Table notifications non trouv√©e, cr√©ation n√©cessaire');
      console.log('   Ex√©cutez le script: add-notifications-table.sql');
    } else {
      console.log(`‚úÖ Table notifications OK (${notifications?.length || 0} notifications)`);
    }

    // 5. V√©rifier les soumissions existantes
    console.log('\n5Ô∏è‚É£ V√©rification des soumissions...');
    const { data: submissions, error: submissionsError } = await supabase
      .from('submissions')
      .select('*')
      .limit(5);

    if (submissionsError) {
      console.error('‚ùå Erreur r√©cup√©ration soumissions:', submissionsError);
      return;
    }

    console.log(`‚úÖ ${submissions?.length || 0} soumissions trouv√©es`);
    if (submissions && submissions.length > 0) {
      console.log('   Premi√®re soumission:', {
        id: submissions[0].id,
        status: submissions[0].status,
        views: submissions[0].views_count || submissions[0].views
      });
    }

    // 6. Test de cr√©ation d'une soumission (si on a les donn√©es n√©cessaires)
    if (campaigns && campaigns.length > 0 && clippers && clippers.length > 0) {
      console.log('\n6Ô∏è‚É£ Test de cr√©ation d\'une soumission...');
      
      const testSubmission = {
        campaign_id: campaigns[0].id,
        clipper_id: clippers[0].id,
        tiktok_url: 'https://www.tiktok.com/@test/video/123456789',
        status: 'pending',
        views_count: 15000,
        earnings: 45.00
      };

      const { data: newSubmission, error: insertError } = await supabase
        .from('submissions')
        .insert(testSubmission)
        .select()
        .single();

      if (insertError) {
        console.error('‚ùå Erreur cr√©ation soumission:', insertError);
      } else {
        console.log('‚úÖ Soumission cr√©√©e avec succ√®s:', newSubmission.id);
        
        // V√©rifier si une notification a √©t√© cr√©√©e
        const { data: newNotifications, error: notifError } = await supabase
          .from('notifications')
          .select('*')
          .eq('submission_id', newSubmission.id);

        if (notifError) {
          console.log('‚ö†Ô∏è Pas de notification cr√©√©e (trigger non configur√©)');
        } else {
          console.log(`‚úÖ ${newNotifications?.length || 0} notification(s) cr√©√©e(s)`);
        }

        // Nettoyer la soumission de test
        await supabase
          .from('submissions')
          .delete()
          .eq('id', newSubmission.id);
        console.log('üßπ Soumission de test supprim√©e');
      }
    }

    console.log('\nüéâ Test termin√© !');
    console.log('\nüìã R√©sum√©:');
    console.log('   - Connexion Supabase: ‚úÖ');
    console.log('   - Campagnes actives: ‚úÖ');
    console.log('   - Clippers disponibles: ‚úÖ');
    console.log('   - Table submissions: ‚úÖ');
    console.log('   - Table notifications: ' + (notificationsError ? '‚ùå' : '‚úÖ'));
    
    if (!notificationsError) {
      console.log('\nüöÄ Le syst√®me est pr√™t pour les tests !');
    } else {
      console.log('\nüîß Actions n√©cessaires:');
      console.log('   1. Ex√©cuter le script add-notifications-table.sql dans Supabase');
      console.log('   2. Relancer ce test');
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le test
testSubmissionFlow(); 